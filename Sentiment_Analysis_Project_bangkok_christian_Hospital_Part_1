{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Project bangkok christian Sentiment_Analysis part1.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "SBMNrOu92uaD",
        "colab_type": "code",
        "outputId": "a5be0496-74aa-4cb4-9f1c-7c6418440945",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 656
        }
      },
      "source": [
        "!pip install googletrans\n",
        "!pip install tqdm --upgrade\n",
        "!pip install twython"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting googletrans\n",
            "  Downloading https://files.pythonhosted.org/packages/fd/f0/a22d41d3846d1f46a4f20086141e0428ccc9c6d644aacbfd30990cf46886/googletrans-2.4.0.tar.gz\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from googletrans) (2.21.0)\n",
            "Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->googletrans) (1.24.3)\n",
            "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->googletrans) (3.0.4)\n",
            "Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->googletrans) (2.8)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->googletrans) (2020.4.5.1)\n",
            "Building wheels for collected packages: googletrans\n",
            "  Building wheel for googletrans (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for googletrans: filename=googletrans-2.4.0-cp36-none-any.whl size=15777 sha256=d687a0531a3af39342e550ddc0b9f04e4b1c7ecf11c9d4b1dcec018032c3c4a5\n",
            "  Stored in directory: /root/.cache/pip/wheels/50/d6/e7/a8efd5f2427d5eb258070048718fa56ee5ac57fd6f53505f95\n",
            "Successfully built googletrans\n",
            "Installing collected packages: googletrans\n",
            "Successfully installed googletrans-2.4.0\n",
            "Collecting tqdm\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/4a/1c/6359be64e8301b84160f6f6f7936bbfaaa5e9a4eab6cbc681db07600b949/tqdm-4.45.0-py2.py3-none-any.whl (60kB)\n",
            "\u001b[K     |████████████████████████████████| 61kB 1.7MB/s \n",
            "\u001b[?25hInstalling collected packages: tqdm\n",
            "  Found existing installation: tqdm 4.38.0\n",
            "    Uninstalling tqdm-4.38.0:\n",
            "      Successfully uninstalled tqdm-4.38.0\n",
            "Successfully installed tqdm-4.45.0\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "tqdm"
                ]
              }
            }
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Collecting twython\n",
            "  Downloading https://files.pythonhosted.org/packages/24/80/579b96dfaa9b536efde883d4f0df7ea2598a6f3117a6dd572787f4a2bcfb/twython-3.8.2-py3-none-any.whl\n",
            "Requirement already satisfied: requests-oauthlib>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from twython) (1.3.0)\n",
            "Requirement already satisfied: requests>=2.1.0 in /usr/local/lib/python3.6/dist-packages (from twython) (2.21.0)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from requests-oauthlib>=0.4.0->twython) (3.1.0)\n",
            "Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests>=2.1.0->twython) (1.24.3)\n",
            "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests>=2.1.0->twython) (3.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests>=2.1.0->twython) (2020.4.5.1)\n",
            "Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests>=2.1.0->twython) (2.8)\n",
            "Installing collected packages: twython\n",
            "Successfully installed twython-3.8.2\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TBpchuK83Nkn",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# web scraping\n",
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "from time import time, sleep\n",
        "from random import randint\n",
        "\n",
        "# Translation\n",
        "from googletrans import Translator\n",
        "\n",
        "# Utilities\n",
        "from tqdm import tqdm\n",
        "from tqdm import tqdm_notebook\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# NLP\n",
        "from nltk import sent_tokenize, word_tokenize, pos_tag, RegexpParser\n",
        "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
        "from nltk.sentiment.util import mark_negation"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ha56xLRj3N0b",
        "colab_type": "code",
        "outputId": "beb67188-4994-493a-df8e-73040f38872b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 134
        }
      },
      "source": [
        "# Download resources\n",
        "import nltk\n",
        "\n",
        "nltk.download(\"punkt\")\n",
        "nltk.download(\"vader_lexicon\")\n",
        "nltk.download('averaged_perceptron_tagger')"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n",
            "[nltk_data] Downloading package vader_lexicon to /root/nltk_data...\n",
            "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
            "[nltk_data]     /root/nltk_data...\n",
            "[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "KOeMYO2E9tH3",
        "colab": {}
      },
      "source": [
        "def honestdoc_comment(url, hospitalName):\n",
        "    \"\"\"\n",
        "    This function is to scrap data from a webboard (https://www.honestdocs.com).\n",
        "\n",
        "    INPUT\n",
        "    url : String\n",
        "      URL of the target website\n",
        "    \n",
        "    OUTPUT\n",
        "    comment : List\n",
        "      List of comments\n",
        "    score : List\n",
        "      List of rating score\n",
        "    \"\"\"\n",
        "    #create connection\n",
        "    data = requests.get(url)\n",
        "    print(\"requests code : {}\".format(data.status_code)) \n",
        "    print(\"note\\n2xx: success\\n4xx, 5xx: error\")\n",
        "    \n",
        "    #scrape comment and score\n",
        "    start_time = time() #start scraping data from page1\n",
        "    r = requests.get(url, params=dict(query=\"web scraping\",page=1)) \n",
        "    soup = BeautifulSoup(r.text,\"html.parser\")\n",
        "    n = len(soup.find_all(\"div\",{\"class\":\"comments__content\"})) #find n of items in the page\n",
        "    \n",
        "    #extract each item\n",
        "    comment = [soup.find_all(\"div\",\n",
        "                             {\"class\":\"comments__content\"})[i].get_text().strip() for i in range(0,n)]\n",
        "    score = [soup.find_all(\"span\",\n",
        "                           {\"class\":\"stars star-rating\"})[i].attrs[\"data-score\"] for i in range(0,n)]\n",
        "    elapsed_time = time() - start_time #finish scraping data from page1\n",
        "    print(\"Time used for scraping data from page - 1 : {} s\".format(elapsed_time))\n",
        "    sleep(randint(1,3)) #mimic human behavior\n",
        "           \n",
        "    p = 2 #start scraping data from page2\n",
        "    while n > 0: #until the number of items in a page = 0\n",
        "        start_time = time() \n",
        "        r = requests.get(url, params=dict(query=\"web scraping\",page=p))\n",
        "        soup = BeautifulSoup(r.text,\"html.parser\")\n",
        "        n = len(soup.find_all(\"div\",{\"class\":\"comments__content\"}))\n",
        "        [comment.append(soup.find_all(\"div\",\n",
        "                                      {\"class\":\"comments__content\"})[i].get_text().strip()) for i in range(0,n)]\n",
        "        [score.append(soup.find_all(\"span\",\n",
        "                                    {\"class\":\"stars star-rating\"})[i].attrs[\"data-score\"]) for i in range(0,n)]\n",
        "        elapsed_time = time() - start_time\n",
        "        print(\"Time used for scraping data from page - {} : {} s\".format(p, elapsed_time))\n",
        "        p +=1\n",
        "        sleep(randint(1,3))\n",
        "\n",
        "    df = pd.DataFrame({\"comment\": comment, \n",
        "              \"score\": score\n",
        "              })\n",
        "    \n",
        "    df[\"hospital\"] = hospitalName\n",
        "    \n",
        "    return df"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kXMlcOPdZVf9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 554
        },
        "outputId": "c27e9da1-c72b-4aca-cdcd-7d7cbd7c9f08"
      },
      "source": [
        "df = honestdoc_comment(r\"https://www.honestdocs.co/hospitals/bangkok-christian-hospital\", \"bangkok-christian-hospital\")\n",
        "comments = df"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "requests code : 200\n",
            "note\n",
            "2xx: success\n",
            "4xx, 5xx: error\n",
            "Time used for scraping data from page - 1 : 1.2354061603546143 s\n",
            "Time used for scraping data from page - 2 : 1.2197844982147217 s\n",
            "Time used for scraping data from page - 3 : 1.2314608097076416 s\n",
            "Time used for scraping data from page - 4 : 1.219510793685913 s\n",
            "Time used for scraping data from page - 5 : 1.2336182594299316 s\n",
            "Time used for scraping data from page - 6 : 1.2696919441223145 s\n",
            "Time used for scraping data from page - 7 : 1.3278865814208984 s\n",
            "Time used for scraping data from page - 8 : 1.2237606048583984 s\n",
            "Time used for scraping data from page - 9 : 1.2364089488983154 s\n",
            "Time used for scraping data from page - 10 : 1.2579689025878906 s\n",
            "Time used for scraping data from page - 11 : 1.2209162712097168 s\n",
            "Time used for scraping data from page - 12 : 1.2387104034423828 s\n",
            "Time used for scraping data from page - 13 : 1.3329107761383057 s\n",
            "Time used for scraping data from page - 14 : 1.243654489517212 s\n",
            "Time used for scraping data from page - 15 : 1.221494436264038 s\n",
            "Time used for scraping data from page - 16 : 1.2257723808288574 s\n",
            "Time used for scraping data from page - 17 : 1.2643296718597412 s\n",
            "Time used for scraping data from page - 18 : 1.2352948188781738 s\n",
            "Time used for scraping data from page - 19 : 1.2550568580627441 s\n",
            "Time used for scraping data from page - 20 : 1.444206714630127 s\n",
            "Time used for scraping data from page - 21 : 1.2494242191314697 s\n",
            "Time used for scraping data from page - 22 : 1.229820728302002 s\n",
            "Time used for scraping data from page - 23 : 1.2371940612792969 s\n",
            "Time used for scraping data from page - 24 : 1.236480951309204 s\n",
            "Time used for scraping data from page - 25 : 1.2578125 s\n",
            "Time used for scraping data from page - 26 : 1.2767770290374756 s\n",
            "Time used for scraping data from page - 27 : 1.3531205654144287 s\n",
            "Time used for scraping data from page - 28 : 0.9693782329559326 s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ht0JMHSKiccX",
        "colab_type": "code",
        "outputId": "9ca24bb7-6740-4548-e4d9-d4477179dd53",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "comments.shape"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(80, 3)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wuJuPj5zdAIv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def th2en(comment):\n",
        "  try:\n",
        "    textTrans = Translator().translate(comment, src=\"th\", dest=\"en\").text\n",
        "  except:\n",
        "    textTrans = \"\"\n",
        "    print(\"\\n Can not translate \" + comment)\n",
        "\n",
        "  return textTrans"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZbyeP7ZNPb2e",
        "colab_type": "code",
        "outputId": "2d9b9d55-47d5-415b-9680-4177ed0f414a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "tqdm.pandas()\n",
        "comments[\"en\"] = comments.progress_apply(lambda x: th2en(x[\"comment\"]), axis=1)"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "100%|██████████| 80/80 [00:10<00:00,  7.43it/s]\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2xTMgHY8if55",
        "colab_type": "code",
        "outputId": "ea6f4ea4-4452-4712-ac3c-807cb2c4cd87",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "comments.shape"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(80, 4)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KGbyAy_YGQ4h",
        "colab_type": "code",
        "outputId": "b2486ca8-d658-4b8a-cfbd-85a3b2f9dbc6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 50
        }
      },
      "source": [
        "comments[\"hospital\"].value_counts()"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "bangkok-christian-hospital    80\n",
              "Name: hospital, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EfpKeXlqFqfU",
        "colab_type": "code",
        "outputId": "634640a8-2672-4a49-acd9-406bb9d8d0bb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        }
      },
      "source": [
        "comments.head()"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>comment</th>\n",
              "      <th>score</th>\n",
              "      <th>hospital</th>\n",
              "      <th>en</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>สิ่งที่ชอบอย่างหนึ่งมากจริงๆคือบุคลากรในโรงพยา...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>What is really like a lot of people in this ho...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ได้เข้าไปใช้บริกาที่นี่ มีความสะอาดและต้อนรับด...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>Riga has to use here. Clean and good reception...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>สิ่งที่ชอบอย่างหนึ่งมากจริงๆคือบุคลากรในโรงพยา...</td>\n",
              "      <td>4</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>What is really like a lot of people in this ho...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>พยาบาล คุณหมอพูดจา ดูแลดีค่ะ โรงพยาบาลมีที่จอด...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>Hospital doctors speak good care hospital park...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ไปหาคุณหมอด้วยอาการปวดขาคุณหมอถามนิดหน่อยแล้วก...</td>\n",
              "      <td>3</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>You go to the doctor with symptoms of leg pain...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                             comment  ...                                                 en\n",
              "0  สิ่งที่ชอบอย่างหนึ่งมากจริงๆคือบุคลากรในโรงพยา...  ...  What is really like a lot of people in this ho...\n",
              "1  ได้เข้าไปใช้บริกาที่นี่ มีความสะอาดและต้อนรับด...  ...  Riga has to use here. Clean and good reception...\n",
              "2  สิ่งที่ชอบอย่างหนึ่งมากจริงๆคือบุคลากรในโรงพยา...  ...  What is really like a lot of people in this ho...\n",
              "3  พยาบาล คุณหมอพูดจา ดูแลดีค่ะ โรงพยาบาลมีที่จอด...  ...  Hospital doctors speak good care hospital park...\n",
              "4  ไปหาคุณหมอด้วยอาการปวดขาคุณหมอถามนิดหน่อยแล้วก...  ...  You go to the doctor with symptoms of leg pain...\n",
              "\n",
              "[5 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M78gON4_0YCE",
        "colab_type": "code",
        "outputId": "13bfcf9d-99d2-45c8-873c-5232c0e6b83f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')\n",
        "\n",
        "import os\n",
        "os.chdir('/content/gdrive/My Drive/DS532_Text_Analytic/Project_Hospital')"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "meMpw-5pz5z-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#backup data \n",
        "comments.to_csv(\"comment_bangkok-christian-hospital.csv\", index=False)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aCKnFo9na4tS",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OoEWJH9p0VXl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "comments = pd.read_csv(\"comment_bangkok-christian-hospital.csv\")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qoZyAuhNiXbU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def sent_level_polarity(df, target):\n",
        "  sentences = []\n",
        "  scores = []\n",
        "  hospitals = []\n",
        "  cids = []\n",
        "  for i in df.index:\n",
        "    en = df.loc[i, target]\n",
        "    score = df.loc[i, \"score\"]\n",
        "    hospital = df.loc[i, \"hospital\"]\n",
        "    s = sent_tokenize(en)\n",
        "    sentences = sentences + s\n",
        "    scores = scores + [score]*len(s)\n",
        "    hospitals = hospitals + [hospital]*len(s)\n",
        "    cids = cids + [i]*len(s)\n",
        "  return pd.DataFrame({\"cid\": cids\n",
        "                       , \"sentences\": sentences\n",
        "                       , \"scores\": scores\n",
        "                       , \"hospital\": hospitals})"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ptt6ALGrq2O5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def predict_sentiment(sentence):\n",
        "  sa = SentimentIntensityAnalyzer()\n",
        "  sentiment_distribution = sa.polarity_scores(sentence)\n",
        "  score = sentiment_distribution.get(\"compound\")\n",
        "  \n",
        "  if score >= 0.05:\n",
        "    return \"positive\"\n",
        "  elif score <= -0.05:\n",
        "    return \"negative\"\n",
        "  else:\n",
        "    return \"neutral\""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ffUvj66uq4f_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data = sent_level_polarity(df=comments, target=\"en\")\n",
        "data[\"sentiment_polarity\"] = data[\"sentences\"].apply(lambda x: predict_sentiment(x))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d8UH9Nfvq5cP",
        "colab_type": "code",
        "outputId": "6a862a60-df13-46fe-df2d-bf8956543ac4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "data.shape"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(315, 5)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vEm2_jaaq6Bu",
        "colab_type": "code",
        "outputId": "6eb09d72-e183-48ef-c9b6-81cffa8c52e0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        }
      },
      "source": [
        "data.head()"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cid</th>\n",
              "      <th>sentences</th>\n",
              "      <th>scores</th>\n",
              "      <th>hospital</th>\n",
              "      <th>sentiment_polarity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>What is really like a lot of people in this ho...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>Most smiling Greetings care patients and those...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>Talk relax at all.</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>Most doctors who have had the good-hearted peo...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>The Department of Medicine Private rooms are O...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   cid  ... sentiment_polarity\n",
              "0    0  ...           positive\n",
              "1    0  ...           positive\n",
              "2    0  ...           positive\n",
              "3    0  ...            neutral\n",
              "4    0  ...           positive\n",
              "\n",
              "[5 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J-3OOU4kvPNZ",
        "colab_type": "text"
      },
      "source": [
        "**Exclude Neutral**\n",
        "\n",
        "Neutral comments will be excluded."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "atKnlLw8vIAi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data = data[data[\"sentiment_polarity\"] != \"neutral\"].reset_index(drop=True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pTvUs44TvXte",
        "colab_type": "code",
        "outputId": "2a249b8b-2189-4511-a51d-d264e1c66646",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "data.shape"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(192, 5)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RgTEOZMjvXeA",
        "colab_type": "code",
        "outputId": "95b1e014-e71f-4875-ed8d-ce64db0707ff",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        }
      },
      "source": [
        "data.head()"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cid</th>\n",
              "      <th>sentences</th>\n",
              "      <th>scores</th>\n",
              "      <th>hospital</th>\n",
              "      <th>sentiment_polarity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>What is really like a lot of people in this ho...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>Most smiling Greetings care patients and those...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>Talk relax at all.</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>The Department of Medicine Private rooms are O...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>Clean and good reception The service was with ...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   cid  ... sentiment_polarity\n",
              "0    0  ...           positive\n",
              "1    0  ...           positive\n",
              "2    0  ...           positive\n",
              "3    0  ...           positive\n",
              "4    1  ...           positive\n",
              "\n",
              "[5 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X8iDos4kv4if",
        "colab_type": "text"
      },
      "source": [
        "## Marking Negation  \n",
        "Negation twists sentiment polarity.  Let's mark them and twist sentiment polarity."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wovtnOCKv5m7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data[\"neg_mark\"] = data[\"sentences\"].apply(lambda x: \" \".join(mark_negation(x.split())))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pb2ZRQZKv74N",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data[\"flag\"] = data[\"neg_mark\"].apply(lambda x: True if \"_NEG\" in x else False)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o1IncMqQv-An",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def neg_extract(text):\n",
        "  tokens = word_tokenize(text)\n",
        "  return \" \".join([token[0:-4] if token[-4:] == \"_NEG\" else token for token in tokens])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BeIpmTKZv_Ou",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data[\"neg_words\"] = data[\"neg_mark\"].apply(lambda x: neg_extract(x))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aWiaZ2muwAk7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data[\"post_polarity\"] = data[\"neg_words\"].apply(lambda x: predict_sentiment(x))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7bTnDthWwCFj",
        "colab_type": "code",
        "outputId": "b1fb2c32-285c-4b76-ad2d-d8fc8ceb8402",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 47
        }
      },
      "source": [
        "data2 = data[data[\"sentiment_polarity\"] != data[\"post_polarity\"]].reset_index(drop=True)\n",
        "data2.head()"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cid</th>\n",
              "      <th>sentences</th>\n",
              "      <th>scores</th>\n",
              "      <th>hospital</th>\n",
              "      <th>sentiment_polarity</th>\n",
              "      <th>neg_mark</th>\n",
              "      <th>flag</th>\n",
              "      <th>neg_words</th>\n",
              "      <th>post_polarity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [cid, sentences, scores, hospital, sentiment_polarity, neg_mark, flag, neg_words, post_polarity]\n",
              "Index: []"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1th2dEUiwT-u",
        "colab_type": "code",
        "outputId": "02db6ab9-8591-4b61-a80a-68d531405455",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "data.shape"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(192, 9)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q9a2gWbswDus",
        "colab_type": "code",
        "outputId": "ed1853b8-4eae-4c5c-a89e-bf163fbb9794",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "source": [
        "data.head()"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cid</th>\n",
              "      <th>sentences</th>\n",
              "      <th>scores</th>\n",
              "      <th>hospital</th>\n",
              "      <th>sentiment_polarity</th>\n",
              "      <th>neg_mark</th>\n",
              "      <th>flag</th>\n",
              "      <th>neg_words</th>\n",
              "      <th>post_polarity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>What is really like a lot of people in this ho...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "      <td>What is really like a lot of people in this ho...</td>\n",
              "      <td>False</td>\n",
              "      <td>What is really like a lot of people in this ho...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>Most smiling Greetings care patients and those...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "      <td>Most smiling Greetings care patients and those...</td>\n",
              "      <td>False</td>\n",
              "      <td>Most smiling Greetings care patients and those...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>Talk relax at all.</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "      <td>Talk relax at all.</td>\n",
              "      <td>False</td>\n",
              "      <td>Talk relax at all .</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>The Department of Medicine Private rooms are O...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "      <td>The Department of Medicine Private rooms are O...</td>\n",
              "      <td>False</td>\n",
              "      <td>The Department of Medicine Private rooms are O...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>Clean and good reception The service was with ...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "      <td>Clean and good reception The service was with ...</td>\n",
              "      <td>False</td>\n",
              "      <td>Clean and good reception The service was with ...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   cid  ... post_polarity\n",
              "0    0  ...      positive\n",
              "1    0  ...      positive\n",
              "2    0  ...      positive\n",
              "3    0  ...      positive\n",
              "4    1  ...      positive\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6sVcVCxgFUa4",
        "colab_type": "text"
      },
      "source": [
        "# Parsing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K0gzmRNM9bbj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "grammar = \"\"\"NP: {<NN|NNS>+}\n",
        "                {<NN|NNS>+<CC><NN|NNS>+}\"\"\"\n",
        "chunker = RegexpParser(grammar)\n",
        "\n",
        "def parsing_extract(sentence):\n",
        "  parsed_tree = chunker.parse(pos_tag(word_tokenize(sentence)))\n",
        "\n",
        "  nps = []\n",
        "  for subtree in parsed_tree.subtrees():\n",
        "      if subtree.label() == 'NP':\n",
        "          t = subtree\n",
        "          t = \" \".join(word for word, tag in t.leaves())\n",
        "          nps.append(t)\n",
        "  return nps"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "giIM2ee3HZ1p",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data[\"NP\"] = data[\"sentences\"].apply(lambda x: parsing_extract(x))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GV2imiuyHlwu",
        "colab_type": "code",
        "outputId": "acf317e7-7642-40d9-b998-200f5ed63d24",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "data.shape"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(192, 10)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d0dOsRWuHm1N",
        "colab_type": "code",
        "outputId": "ecafee48-1c4b-4656-c87d-1f9f1b610c0e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "source": [
        "data.head()"
      ],
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cid</th>\n",
              "      <th>sentences</th>\n",
              "      <th>scores</th>\n",
              "      <th>hospital</th>\n",
              "      <th>sentiment_polarity</th>\n",
              "      <th>neg_mark</th>\n",
              "      <th>flag</th>\n",
              "      <th>neg_words</th>\n",
              "      <th>post_polarity</th>\n",
              "      <th>NP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>What is really like a lot of people in this ho...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "      <td>What is really like a lot of people in this ho...</td>\n",
              "      <td>False</td>\n",
              "      <td>What is really like a lot of people in this ho...</td>\n",
              "      <td>positive</td>\n",
              "      <td>[lot, people, hospital]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>Most smiling Greetings care patients and those...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "      <td>Most smiling Greetings care patients and those...</td>\n",
              "      <td>False</td>\n",
              "      <td>Most smiling Greetings care patients and those...</td>\n",
              "      <td>positive</td>\n",
              "      <td>[Greetings care patients, service]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>Talk relax at all.</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "      <td>Talk relax at all.</td>\n",
              "      <td>False</td>\n",
              "      <td>Talk relax at all .</td>\n",
              "      <td>positive</td>\n",
              "      <td>[Talk relax]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>The Department of Medicine Private rooms are O...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "      <td>The Department of Medicine Private rooms are O...</td>\n",
              "      <td>False</td>\n",
              "      <td>The Department of Medicine Private rooms are O...</td>\n",
              "      <td>positive</td>\n",
              "      <td>[rooms, price]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>Clean and good reception The service was with ...</td>\n",
              "      <td>5</td>\n",
              "      <td>bangkok-christian-hospital</td>\n",
              "      <td>positive</td>\n",
              "      <td>Clean and good reception The service was with ...</td>\n",
              "      <td>False</td>\n",
              "      <td>Clean and good reception The service was with ...</td>\n",
              "      <td>positive</td>\n",
              "      <td>[reception, service, system]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   cid  ...                                  NP\n",
              "0    0  ...             [lot, people, hospital]\n",
              "1    0  ...  [Greetings care patients, service]\n",
              "2    0  ...                        [Talk relax]\n",
              "3    0  ...                      [rooms, price]\n",
              "4    1  ...        [reception, service, system]\n",
              "\n",
              "[5 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1IL_r1WJPHkm",
        "colab_type": "text"
      },
      "source": [
        "# Split dataframe into positive and negative sentiment"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dgOYYa_fPHT8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pos = data[data[\"sentiment_polarity\"] == \"positive\"].reset_index(drop=True)\n",
        "pos_words = sum(pos[\"NP\"].tolist(), [])\n",
        "pos_words = [word.lower() for word in pos_words]\n",
        "poshist = pd.DataFrame({\"words\": pos_words})\n",
        "poshist = poshist.groupby(\"words\").size().reset_index(name=\"#pos\")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KuKTgi5VHo55",
        "colab_type": "code",
        "outputId": "356ed2ed-a763-43b4-eef6-5cf400cb098c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        }
      },
      "source": [
        "poshist.sort_values(by='#pos', ascending=False)"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>words</th>\n",
              "      <th>#pos</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>doctor</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>164</th>\n",
              "      <td>service</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>doctors</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>135</th>\n",
              "      <td>people</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>82</th>\n",
              "      <td>hospital</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>79</th>\n",
              "      <td>holiday</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>81</th>\n",
              "      <td>home care</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>83</th>\n",
              "      <td>hospital doctors</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>84</th>\n",
              "      <td>hospital stay</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220</th>\n",
              "      <td>wound</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>221 rows × 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                words  #pos\n",
              "47             doctor    19\n",
              "164           service    18\n",
              "48            doctors    14\n",
              "135            people    11\n",
              "82           hospital    11\n",
              "..                ...   ...\n",
              "79            holiday     1\n",
              "81          home care     1\n",
              "83   hospital doctors     1\n",
              "84      hospital stay     1\n",
              "220             wound     1\n",
              "\n",
              "[221 rows x 2 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2nH5FzVoQ4gP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "neg = data[data[\"sentiment_polarity\"] == \"negative\"].reset_index(drop=True)\n",
        "neg_words = sum(neg[\"NP\"].tolist(), [])\n",
        "neg_words = [word.lower() for word in neg_words]\n",
        "neghist = pd.DataFrame({\"words\": neg_words})\n",
        "neghist = neghist.groupby(\"words\").size().reset_index(name=\"#neg\")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bRWv3Ej8Q61S",
        "colab_type": "code",
        "outputId": "002ed259-c599-4d65-bca2-d0f1b188007f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        }
      },
      "source": [
        "neghist.sort_values(by='#neg', ascending=False)"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>words</th>\n",
              "      <th>#neg</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>doctor</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>attention</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>hospital</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>patients</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>service</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>ease</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>drug charges</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>downside</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>disease</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>90</th>\n",
              "      <td>years</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>91 rows × 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           words  #neg\n",
              "28        doctor    11\n",
              "3      attention     4\n",
              "40      hospital     4\n",
              "57      patients     3\n",
              "72       service     3\n",
              "..           ...   ...\n",
              "32          ease     1\n",
              "31  drug charges     1\n",
              "30      downside     1\n",
              "27       disease     1\n",
              "90         years     1\n",
              "\n",
              "[91 rows x 2 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M9Enk5CqRRAp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from wordcloud import WordCloud\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0HBaN9dURSPL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def vizwordcloud(df):\n",
        "    tuples = [tuple(x) for x in df.values]\n",
        "    wordcloud = WordCloud().generate_from_frequencies(dict(tuples))\n",
        "    plt.figure()\n",
        "    plt.imshow(wordcloud, interpolation=\"bilinear\")\n",
        "    plt.axis(\"off\")\n",
        "    plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z1m6FvUgRTqF",
        "colab_type": "code",
        "outputId": "53f6d319-86e9-4f7a-8028-a1121dfea8ef",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 198
        }
      },
      "source": [
        "vizwordcloud(poshist)"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QnMStiOsRU84",
        "colab_type": "code",
        "outputId": "ad8a8f17-30cb-4d1d-d302-0045e5b248cc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 198
        }
      },
      "source": [
        "vizwordcloud(neghist)"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PE7hB9Sqcd7C",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}